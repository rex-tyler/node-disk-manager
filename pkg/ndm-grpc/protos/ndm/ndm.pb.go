// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.1
// source: ndm.proto

package ndm

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ISCSIStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ISCSIStatus) Reset() {
	*x = ISCSIStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISCSIStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISCSIStatus) ProtoMessage() {}

func (x *ISCSIStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISCSIStatus.ProtoReflect.Descriptor instead.
func (*ISCSIStatus) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{0}
}

func (x *ISCSIStatus) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	GitCommit string `protobuf:"bytes,2,opt,name=GitCommit,proto3" json:"GitCommit,omitempty"`
}

func (x *VersionInfo) Reset() {
	*x = VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo) ProtoMessage() {}

func (x *VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInfo.ProtoReflect.Descriptor instead.
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{1}
}

func (x *VersionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionInfo) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

type NodeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
}

func (x *NodeName) Reset() {
	*x = NodeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeName) ProtoMessage() {}

func (x *NodeName) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeName.ProtoReflect.Descriptor instead.
func (*NodeName) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{2}
}

func (x *NodeName) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{3}
}

var File_ndm_proto protoreflect.FileDescriptor

var file_ndm_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6e, 0x64, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6e, 0x64, 0x6d,
	0x22, 0x25, 0x0a, 0x0b, 0x49, 0x53, 0x43, 0x53, 0x49, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x45, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x26,
	0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x06, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x32, 0x5c,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x1a, 0x10, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x09, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x0d, 0x2e,
	0x6e, 0x64, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x2e, 0x0a, 0x05,
	0x49, 0x53, 0x43, 0x53, 0x49, 0x12, 0x25, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x09, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x10, 0x2e, 0x6e, 0x64, 0x6d,
	0x2e, 0x49, 0x53, 0x43, 0x53, 0x49, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x05, 0x5a, 0x03,
	0x6e, 0x64, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ndm_proto_rawDescOnce sync.Once
	file_ndm_proto_rawDescData = file_ndm_proto_rawDesc
)

func file_ndm_proto_rawDescGZIP() []byte {
	file_ndm_proto_rawDescOnce.Do(func() {
		file_ndm_proto_rawDescData = protoimpl.X.CompressGZIP(file_ndm_proto_rawDescData)
	})
	return file_ndm_proto_rawDescData
}

var file_ndm_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ndm_proto_goTypes = []interface{}{
	(*ISCSIStatus)(nil), // 0: ndm.ISCSIStatus
	(*VersionInfo)(nil), // 1: ndm.VersionInfo
	(*NodeName)(nil),    // 2: ndm.NodeName
	(*Null)(nil),        // 3: ndm.Null
}
var file_ndm_proto_depIdxs = []int32{
	3, // 0: ndm.Info.FindVersion:input_type -> ndm.Null
	3, // 1: ndm.Info.FindNodeName:input_type -> ndm.Null
	3, // 2: ndm.ISCSI.Status:input_type -> ndm.Null
	1, // 3: ndm.Info.FindVersion:output_type -> ndm.VersionInfo
	2, // 4: ndm.Info.FindNodeName:output_type -> ndm.NodeName
	0, // 5: ndm.ISCSI.Status:output_type -> ndm.ISCSIStatus
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ndm_proto_init() }
func file_ndm_proto_init() {
	if File_ndm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ndm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISCSIStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ndm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ndm_proto_goTypes,
		DependencyIndexes: file_ndm_proto_depIdxs,
		MessageInfos:      file_ndm_proto_msgTypes,
	}.Build()
	File_ndm_proto = out.File
	file_ndm_proto_rawDesc = nil
	file_ndm_proto_goTypes = nil
	file_ndm_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoClient interface {
	FindVersion(ctx context.Context, in *Null, opts ...grpc.CallOption) (*VersionInfo, error)
	FindNodeName(ctx context.Context, in *Null, opts ...grpc.CallOption) (*NodeName, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) FindVersion(ctx context.Context, in *Null, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, "/ndm.Info/FindVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) FindNodeName(ctx context.Context, in *Null, opts ...grpc.CallOption) (*NodeName, error) {
	out := new(NodeName)
	err := c.cc.Invoke(ctx, "/ndm.Info/FindNodeName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
type InfoServer interface {
	FindVersion(context.Context, *Null) (*VersionInfo, error)
	FindNodeName(context.Context, *Null) (*NodeName, error)
}

// UnimplementedInfoServer can be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (*UnimplementedInfoServer) FindVersion(context.Context, *Null) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindVersion not implemented")
}
func (*UnimplementedInfoServer) FindNodeName(context.Context, *Null) (*NodeName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNodeName not implemented")
}

func RegisterInfoServer(s *grpc.Server, srv InfoServer) {
	s.RegisterService(&_Info_serviceDesc, srv)
}

func _Info_FindVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).FindVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ndm.Info/FindVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).FindVersion(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_FindNodeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).FindNodeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ndm.Info/FindNodeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).FindNodeName(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

var _Info_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ndm.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindVersion",
			Handler:    _Info_FindVersion_Handler,
		},
		{
			MethodName: "FindNodeName",
			Handler:    _Info_FindNodeName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ndm.proto",
}

// ISCSIClient is the client API for ISCSI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ISCSIClient interface {
	Status(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ISCSIStatus, error)
}

type iSCSIClient struct {
	cc grpc.ClientConnInterface
}

func NewISCSIClient(cc grpc.ClientConnInterface) ISCSIClient {
	return &iSCSIClient{cc}
}

func (c *iSCSIClient) Status(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ISCSIStatus, error) {
	out := new(ISCSIStatus)
	err := c.cc.Invoke(ctx, "/ndm.ISCSI/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ISCSIServer is the server API for ISCSI service.
type ISCSIServer interface {
	Status(context.Context, *Null) (*ISCSIStatus, error)
}

// UnimplementedISCSIServer can be embedded to have forward compatible implementations.
type UnimplementedISCSIServer struct {
}

func (*UnimplementedISCSIServer) Status(context.Context, *Null) (*ISCSIStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterISCSIServer(s *grpc.Server, srv ISCSIServer) {
	s.RegisterService(&_ISCSI_serviceDesc, srv)
}

func _ISCSI_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ISCSIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ndm.ISCSI/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ISCSIServer).Status(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

var _ISCSI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ndm.ISCSI",
	HandlerType: (*ISCSIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _ISCSI_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ndm.proto",
}
